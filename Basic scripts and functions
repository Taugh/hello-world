# Basic scripts and function

```python

# arithmetic progression example
a = int(input("Enter amount: "))
d = int(input("Enter increment: "))
n = int(input("Enter term: "))
print(a + (n - 1)* d)


# geometric progression example
a = int(input("Enter amount: "))
r = int(input("Enter increment: "))
n = int(input("Enter term: "))
print(a* r**(n-1))


# Sums a squence of numbers
n =  int(input("Enter last number: "))
x = (n * (n + 1)//2)
print(f" sum is {x:,}")


# returns last number in a string
num = input("Enter a number: ")

x = [n for n in num]
print(f"The last digit is {x[-1]}")

last = abs(int(num)) % 10
print(f"The last digit is {last}")


# Day before n days
days = ["Sunday", "Monday", "Tuesday", "Wednsday", "Thursday", "Friday", "Saturday"]

day = input("Enter start day: ")

ndays = int(input("Enter number of days to move: "))
yday = days.index(day) - (ndays % 7)

print(f"Your new day is {days[yday]}")  

# List of lists
def enrollment_stats(list_of_universities):
    
    students_enrollment = []
    tuition = []

    for university in list_of_universities:
        students_enrollment.append(university[1])
        tuition.append(university[2])
    return students_enrollment, tuition

def mean(value):
    return sum(value) /len(value)

def median(value):
    value.sort()

    if len(value) % 2 == 1:
        center_idx = int(len(value) / 2)
        return value[center_idx]
    else:
        left_center_idx = (len(value) - 1) // 2
        right_center_idx = (len(value) + 1) // 2
        return mean([value[left_center_idx], value[right_center_idx]])


universities = [
    ['Calafornia Institute of Technology', 2175, 37704],
    ['Harvard', 19627, 39849],
    ['Massachusetts institute of Technology', 10566, 40732],
    ['Princeton', 7802, 37000],
    ['Rice', 5879, 35551],
    ['Stanford', 19535, 40569],
    ['Yale',11701, 40500]
                ]

totals = enrollment_stats(universities)

print("\n")
print("*****" * 6)
print(f"Total students:  {sum(totals[0]):,}")
print(f"Total tuition:  ${sum(totals[1]):,}")
print(f"\nStudent mean:  {mean(totals[0]):,.2f}")
print(f"Student median:  {median(totals[0]):,}")
print(f"\nTuition mean: ${mean(totals[1]):,.2f}")
print(f"Tuition median: ${median(totals[1]):,}")
print("*****" * 6)
print("\n")

'''Solution the Cats with hats problem'''
# Total number of cats is 100
# Number of laps is 100
# Each lap increases by n += n

total_cats = 100
cats_with_hats = []
number_of_laps = 100

for lap in range(1, number_of_laps + 1):
    for cat in range(1, total_cats + 1):
        if cat % lap == 0:
            if cat in cats_with_hats:
                cats_with_hats.remove(cat)
            else:
                cats_with_hats.append(cat)

print(cats_with_hats)

'''Alternate solution to Cats with hats
# Number of cats is 100
# Number of laps is 100
# First round all cats get a hat
# For remaining rounds, if a cat has a hat- remove hat, else add hat
# Each lap increases by n += 1 and cats stopped ay is cat # / lap == 0
# At lap 100 the only cat stopped at will be cat 100

cats_with_hats = []
num_of_cats = 100
num_of_laps = 100

# Add 1 to num of laps to make 100
for lap in range(1, num_of_laps + 1):
    # Add 1 to cats to make 100
    for cat in range(1, num_of_cats + 1):
        # Check to make sure onlt cats taht are multiple of laps are selected
        if cat % lap == 0:
            if cat in cats_with_hats:
                cats_with_hats.remove(cat)
            else:
                cats_with_hats.append(cat)

print(cats_with_hats)

# builds a random poem from word lists
from random import choice


nouns = ["celebration", "maintenance", "television", "manufacturer",
         "imagination", "atmosphere"]
verbs = ["facilitate", "contribute", "appreciate", "investigate", "concentrate",
         "experience"]
adjectives = ["bewildered", "electrical", "outrageous", "successfully",
              "harmonious", "frightened"]
prepositions = ["beneath", "within", "despite", "considering"]
adverbs = ["extravagantly", "mysteriously", "wearily", "greedily"]

def make_poem():
    noun1 = choice(nouns)
    noun2 = choice(nouns)
    noun3 = choice(nouns)

    while noun1 == noun2:
        noun2 = choice(nouns)
        
    while noun1 == noun3 or noun2 == noun3:
        noun3 = choice(nouns)

    verb1 = choice(verbs)
    verb2 = choice(verbs)
    verb3 = choice(verbs)

    while verb1 == verb2:
        verb2 = choice(verbs)

    while verb1 == verb3 or verb2 == verb3:
        verb2 = choice(verbs)

    adj1 = choice(adjectives)
    adj2 = choice(adjectives)
    adj3 = choice(adjectives)

    while adj1 == adj2:
        adj2 = choice(adjectives)

    while adj1 == adj3 or adj2 == adj3:
        adj3 = choice(adjectives)

    prep1 = choice(prepositions)
    prep2 = choice(prepositions)

    while prep1 == prep2:
        prep2 = choice(prepositions)

    adverb = choice(adverbs)

    if "aeiou".find(adj1[0]) != -1:
        article = "An"
    else:
        article = "A"

    if "aeiou".find(adj3[0]) != -1:
        article = "An"
    else:
        article = "A"

    poem = (
        f"{article} {adj1} {noun1}\n\n"
        f"{article} {adj1} {noun1} {verb1} {prep1} the {adj2} {noun2}\n"
        f"{adverb}, the {noun1} {verb2}\n"
        f"the {noun2} {verb3} {prep2} {article.lower()} {adj3} {noun3}"
        )

    return poem

poem = make_poem()
print(poem)

# State capital game
# Gives a state to user and keeps giving states until the user guesses the capital of the given state 
from random import choice

capitals_dict = {"Alabama": "Montgomery", "Alaska": "Juneau", "Arizona": \
                 "Phoenix", "Arkansas": "Little Rock", "California": \
                 "Sacramento", "Colorado": "Denver", "Connecticut": "Hartford", \
                 "Delaware": "Dover", "Florida": "Tallahassee", "Georgia": \
                 "Alanta"}


state, capital = choice(list(capitals_dict.items()))
give_up = "Exit"

answer = input(f"What is the capital of {state}? ")

while True:
    if answer.casefold() == capital.casefold():
        print("Correct!")
        break
    elif answer.casefold() == give_up.casefold():
        print(f"The capital of {state} is {capital}.")
        print("Goodbye")
        break
    else:
        print(f"Incorrect answer.")
        answer = input(f"Enter capital, or {give_up} to quit! ")
        

def displaycontents(filename):
    fp = open(filename)
    print(fp.read())
    fp.close()


def word_count (wordlist):  # Takes a list as an input
    newdict = {}
    for i in wordlist:
        x = 0
        key = i
        if key in newdict:
            continue
        else:
            for j in wordlist:
              if i == j:
                  x += 1
            newdict.update({i:x})
    
    return newdict


def letter_count(text):
    count = 0
    for i in text:
        if i >= "a" and i <= "z":
            count += 1
        elif i >= "A" and i <= "Z":
                count += 1
    return count


def Inclean(s): # Use fof case insensitive
    news = ""
    s = s.lower()
    for c in s:
        if c >= "a" and c <= "z":
            news += c
        else:
            news += " "
    
    return news


# def clean(s): # Use for case sensitive
#     news = ""
#     for c in s:
#         if c >= "a" and c <= "z":
#             news += c
#         elif c >= "A" and c <= "Z":
#             news += c
#         else:
#             news += " "
    
#     return print(news)

def clean( s ):
    news = ""
    s = s.lower()
    for c in s:
        if c >= "a" and c <= "z":
            news += c
        else:
            news += " "
    return news


# Takes string s and return only alphas and spaces where non-alphas were
def alphas(s):
    x = ''
    for i in s:
       if i.isalpha():
           x = x + i
       else:
           x = x + ' '
        
    return x

def noVowels(s):
    news = ""
    vowels = {"a": "", "e": "", "i": "", "o": "","u": ""}
    s = s.lower()
    novowels = s.maketrans(vowels)
    x = 0
    for c in s:
        x += 1
        for j in vowels:
            if c == j:
                news = s.translate(novowels)
    return news


def removevowels(line):
    newline = ""
    for c in line:
        if c not in "aeiouAEIOU":
            newline += c
    return newline

# Find prime numbers
import time
import math

# def is_prime_V1(n):
#     """Return 'True' if 'n' is a prime number. False otherwise"""
#     if n == 1:
#         return False  #1 is not prime
    
#     for d in range(2, n):
#         if n % d == 0:
#             return False
#     return True

# # ====== Test Function =====
# for n in range(1, 20):
#     print(n, is_prime_V1(n))


# def is_prime_V2(n):
#     """Return 'True' if 'n' is a prime number. False otherwise"""
#     if n == 1:
#         return False  #1 is not prime
    
#     max_divisor = math.floor(math.sqrt(n))
#     for d in range(2, 1 + max_divisor):
#         if n % d == 0:
#             return False
#     return True

# # ====== Test Function =====
# for n in range(1, 20):
#     print(n, is_prime_V2(n))


def is_prime_V3(n):
    """Return 'True' if 'n' is a prime number. False otherwise"""
    if n == 1:
        return False  #1 is not prime
   
    # If it's even and not 2, then it's not prime
    if n == 2:
        return True
    if n > 2 and n % 2 ==0:
        return False
    
    max_divisor = math.floor(math.sqrt(n))
    for d in range(3, 1 + max_divisor, 2):
        if n % d == 0:    
            return False
    return True    

# # ====== Test Function =====
# for n in range(1, 20):
#     print(n, is_prime_V3(n))

# ===== Time Function Test =====
t0 = time.time()
for n in range(1, 100000):
    is_prime_V3(n)
t1 = time.time()
print('Time required ', t1- t0)


# Get user input with data type restrictions
def getFloat(prompt):
    while True:
        try:
            num = float(input(prompt))
        except ValueError:
            print("That is not a number -- please try again")
            continue
        return num

def getInteger(prompt):
    while True:
        try:
            num = int(input(prompt))
        except ValueError:
            print("That is not an integer -- please try again")
            continue
        return num

def getString(prompt):
    line = input(prompt)
    return line.strip()

def getLetter(prompt):
    while True:
        line = input(prompt)
        line = line.strip()
        line = line.upper()
        if len(line) != 1:
            print("Please enter exactly one character")
            continue
        if line < 'A' or line > 'Z':
            print("Please enter a letter from the alphabet")
            continue
        return line


```
